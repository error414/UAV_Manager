"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.6.

See https://docs.djangoproject.com/en/5.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Project base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ns1jd9c$05-&e0zgb_iwm8=3i5_f8^b-^1psjz3$6%beom%rru'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Hosts allowed to connect
ALLOWED_HOSTS_ENV = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_ENV.split(',')]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',     # Required for Djoser password reset
    'api.apps.ApiConfig',       # Use AppConfig so ready() runs
    'rest_framework',
    'djoser',
    'corsheaders',
    'django_crontab',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME', 'uav_manager_db'),
        'USER': os.environ.get('POSTGRES_USER', 'uav_manager'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'DVgt8pf4'),
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'uploads'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'api.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:5175')
API_HOST = FRONTEND_URL.replace('http://', '').replace(':5175', '')

DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'USERNAME_FIELD': 'email',
    'LOGIN_ON_REGISTRATION': True,
    'SERIALIZERS': {
        'user_create': 'api.serializers.CustomUserCreateSerializer',
        'user': 'api.serializers.UserSerializer',
    },
    # Only the path is emitted; DOMAIN/SERVER_PROTOCOL is prepended
    'PASSWORD_RESET_CONFIRM_URL': 'reset-password/{uid}/{token}',

    'DOMAIN': API_HOST + ':5175' if API_HOST != 'localhost' else 'localhost:5173',
    'SITE_NAME': 'UAV Manager',
    'SERVER_PROTOCOL': 'http',
}

DJOSER.update({
    'TOKEN_MODEL': None,  # Not used with JWT
})

SIMPLE_JWT = {
    # The access token lifetime controls how long a user can use their access token before it expires.
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    # The refresh token lifetime controls how long a refresh token is valid.
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    # When set to True, the refresh token is rotated each time a new access token is issued.
    'ROTATE_REFRESH_TOKENS': True,
    # If refresh token rotation is enabled, blacklists the old refresh token.
    'BLACKLIST_AFTER_ROTATION': True,
    # The algorithm used to sign the token. HS256 is common.
    'ALGORITHM': 'HS256',
    # Your Django SECRET_KEY is typically used as the signing key.
    'SIGNING_KEY': SECRET_KEY,
    # Optional: Specify the authentication header types.
    'AUTH_HEADER_TYPES': ('Bearer',),
    # The field in your user model used to identify the user.
    'USER_ID_FIELD': 'user_id',
    # The claim key used to identify the user in the payload.
    'USER_ID_CLAIM': 'user_id',
    # Additional settings can be added as needed.
}

CORS_ALLOW_ALL_ORIGINS = False

# Replace the CORS settings with these explicit configurations
CORS_ALLOWED_ORIGINS = [
    FRONTEND_URL,
    "http://localhost:5175",
    "http://localhost:5173",
]

# Add additional CORS settings for handling preflight requests
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CRONJOBS = [
    ('0 7 * * *', 'api.services.user_service.UserService.check_license_expiry'),
    ('0 8 * * *', 'api.services.maintenance_service.MaintenanceService.check_maintenance_reminders'),
]

SITE_ID = 1  # Required by django.contrib.sites

# Email backend configuration (SMTP)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'example.hosting.ch'
EMAIL_PORT = 465
EMAIL_USE_SSL = True      # Use SSL on port 465
EMAIL_USE_TLS = False     # No TLS upgrade
EMAIL_HOST_USER = 'info@uav-manager.com'
EMAIL_HOST_PASSWORD = ''
DEFAULT_FROM_EMAIL = 'UAV Manager <info@uav-manager.com>'